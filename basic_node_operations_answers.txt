1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

sort - returned the file sorted alphabetically by line
break;
       break;
       break;
       commandLibrary.cat(userInputArray.slice(1));
       commandLibrary.head(userInputArray.slice(1));
       commandLibrary.tail(userInputArray.slice(1));
      done(bufferText);
      done(bufferText);
      done(data);
      if (err) throw err;
      if (err) throw err;
      if (err) throw err;
      var bufferText = Buffer.from(slicedText, 'utf8');
      var bufferText = Buffer.from(slicedText, 'utf8');
      var slicedText = text.split('\n').slice(0, 10).join('\n');
      var slicedText = text.split('\n').slice(-10).join('\n');
      var text = data.toString('utf8');
      var text = data.toString('utf8');
     break;
     commandLibrary.echo(userInputArray.slice(1).join(" "));
    });
    });
    });
    case "cat":
    case "echo":
    case "head" :
    case "tail" :
    const fileName = fullPath[0];
    const fileName = fullPath[0];
    const fileName = fullPath[0];
    default: process.stdout.write('command cannot be found');
    done(userInput);
    fs.readFile(fileName, (err, data) => {
    fs.readFile(fileName, (err, data) => {
    fs.readFile(fileName, (err, data) => {
  "cat" : function(fullPath) {
  "echo": function(userInput) {
  "head" : function(fullPath) {
  "tail" : function(fullPath) {
  }
  }
  },
  },
  },
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
  switch (command) {
 };
}
const commandLibrary ={
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;

WC - returned newline, word, and byte counts for the file and then the file name.
37  73 853 command.js

unig- basically just removed redundancies. If there are two lines that are the same it removes it
const fs = require("fs");

function done(output) {
  process.stdout.write(output);
  process.stdout.write('\nprompt > ');
}

function evaluateCmd(userInput) {
  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

  switch (command) {
    case "echo":
     commandLibrary.echo(userInputArray.slice(1).join(" "));
     break;
     case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       break;
  }
}

const commandLibrary ={
  "echo": function(userInput) {
    done(userInput);
  },

  "cat" : function(fullPath) {
    const fileName = fullPath[0];
    fs.readFile(fileName, (err, data) => {
      if (err) throw err;
      done(data);
    });
  }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;





}



2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

I used uniq bash.js | sort. The out put returned the content of uniq (which removes redundant lines) and displayed them in alphabetic order by line, which is what sort does

commands.evaluateCmd(userInput);
userInput = userInput.toString().trim();



});
const commands = require("./command.js");
process.stdin.on('data', (userInput) => {
process.stdout.write('prompt > ');


6.

var x =  "I'm learning to program algorithms!"
function reverseString(inputString) {
  return inputString.split('').reverse().join('').split(' ').reverse().join(' ');
}

reverseString(x);
